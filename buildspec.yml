version: 0.2
#env:
#  variables:
#    DOCKER_BUCKET: "download.docker.com"
#    DOCKER_VERSION: "17.09.0-ce"
#    DOCKER_CHANNEL: "stable"
#    DOCKER_SHA256: "a9e90a73c3cdfbf238f148e1ec0eaff5eb181f92f35bdd938fd7dab18e1c4647"
#    DIND_COMMIT: "3b5fac462d21ca164b3778647420016315289034"
#    DOCKER_COMPOSE_VERSION: "1.16.1"

phases:
  install:
    commands:
      - echo Entered the install phase...
      #- set -ex
      #- curl -fSL "https://${DOCKER_BUCKET}/linux/static/${DOCKER_CHANNEL}/x86_64/docker-${DOCKER_VERSION}.tgz" -o docker.tgz
      #- echo "${DOCKER_SHA256} *docker.tgz" | sha256sum -c -
      #- tar --extract --file docker.tgz --strip-components 1  --directory /usr/local/bin/
      #- rm docker.tgz
      #- docker -v
      # set up subuid/subgid so that "--userns-remap=default" works out-of-the-box
      #- addgroup dockremap
      #- useradd -g dockremap dockremap
      #- echo 'dockremap:165536:65536' >> /etc/subuid
      #- echo 'dockremap:165536:65536' >> /etc/subgid
      #- wget "https://raw.githubusercontent.com/docker/docker/${DIND_COMMIT}/hack/dind" -O /usr/local/bin/dind
      #- curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose
      #- chmod +x /usr/local/bin/dind /usr/local/bin/docker-compose
      #  # Ensure docker-compose works
      #- docker-compose version
  pre_build:
    commands:
      - printenv
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - mvn install
      - ls -l $CODEBUILD_SRC_DIR/target/
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"spring-tomcat","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
    files: imagedefinitions.json
#artifacts:
#  files:
#    - target/spring-mvc-showcase.war
#  discard-paths: no